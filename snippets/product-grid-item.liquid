{% comment %}
It may be a good idea to provide a theme setting that lets a merchant decide how many products to show per row
on collection pages. Or, it may be a good idea to provide a control on the store front which lets a shopper decide
whether items be presented in a grid or in a list.
That information about the presentation can be passed on to the product-grid-item.liquid snippet via the 'with' argument.
Use of the 'with' argument is explained here: http://docs.shopify.com/themes/theme-templates/snippets.
The information can then be referred to by accessing the variable which goes by the same name as the snippet,
in this case product-grid-item. If the 'with' argument is not used, the snippet variable is set to an empty string.
Here, for the sake of teaching, we will use 2 presentation options:
- 3 products per row, when passing the value 'three-per-row' to the snippet
- 4 products per row, when passing the value 'four-per-row' to the snippet
{% endcomment %}

{% include 'buyx-price-min' with product %}

{% comment %}If no value is passed to the snippet, we will set the snippet variable to a sensible default.{% endcomment %}
{% if product-grid-item == '' %}{% assign product-grid-item = 'four-per-row' %}{% endif %}

{% comment %}Is this product on sale?{% endcomment %}
{% assign on_sale = false %}
{% if product.compare_at_price > buyx_price_min %}
  {% assign on_sale = true %}
{% endif %}

{% if product.tags contains 'Featured' %}
    {% assign featured_class = 'featured' %}
{% endif %}

{% for option in product.options %}
  {% if option == 'Size' %}
    {% assign opt = 'option' | append: forloop.index %}
    {% break %}
  {% endif %}
{% endfor %}
{% assign sizes = blank %}
{% for variant in product.variants %}
  {% if variant.available %}
    {% unless sizes contains variant[opt] %}
      {% assign sizes = sizes | append: variant[opt] | append: '|' %}
    {% endunless %}
  {% endif %}
{% endfor %}
{% assign sizes = sizes | split: '|' %}
{% assign sizes_class = blank %}
{% for size in sizes %}
  {% assign size_handle = size  | handle | append: ' ' %}
  {% assign sizes_class = sizes_class | append: size_handle %}
{% endfor %}
<script>
  var newSizes = {{ sizes | json }};
  newSizes.forEach(function (size) {
    if (sizes.indexOf(size) < 0)
      sizes.push(size);
  });
</script>

<div class="{{ sizes_class }}product-tile span3 {{ product-grid-item }} {{ featured_class }}{% unless buyx_product_available %} sold-out{% endunless %}{% if on_sale %} on-sale{% endif %}{% if product-grid-item == 'four-per-row' %}{% cycle 'last': '', '', '', ' last-in-row' %}{% elsif product-grid-item == 'three-per-row' %}{% cycle 'last': '', '', ' last-in-row' %}{% endif %}" itemtype="http://schema.org/Product">


    <div class="box-flags">
        {% if product.tags contains 'Featured' %}
            <div class="callout-flag flag-featured flag-one" data-color="#3c8ca5" style="background-color: rgb(0, 73, 144);">Featured</div>
        {% endif %}

        {% if product.tags contains 'New' %}
            <div class="callout-flag flag-new flag-one">New</div>
        {% endif %}

        {% if product.metafields.c_f.flag_title %}
            <div class="callout-flag flag-one" style="background-color: {{ product.metafields.c_f.flag_color }};">{{ product.metafields.c_f.flag_title }}</div>
        {% endif %}
    </div>


    <div class="product-image">
        <a href="{{ product.url | within: collection }}">
            <img class="main_image" src="{{ product.featured_image.src | product_img_url: 'large' }}" alt="{{ product.featured_image.alt | escape }}" />
        </a>
    </div>

    <div class="product-info">
        <div class="name">
            <a href="{{ product.url | within: collection }}">
                <span class="long_name">{{ product.title | remove: "Mens - " | remove: "Womens - " }}</span>
                <span class="price">
                    {% if on_sale %}
                    <span class="selling original_price">{{ product.compare_at_price | money | remove: ".00" | remove: " "  }}</span>
                    <span class="selling sale_price">{{ buyx_price_min | money | remove: ".00" | remove: " "  }}</span>
                    {% else %}
                    <span class="selling" itemprop="price">
                        {{ buyx_price_min | money | remove: ".00" | remove: " " }}
                    </span>
                    {% endif %}
                </span>
            </a>
            <span class="materials_color on_sale">
                <a class="info" href="{{ product.url | within: collection }}">
                    {{ product.metafields.c_f.product_material }}
                    {% if product.metafields.c_f.product_material and product.metafields.c_f.colorway %}
                     /
                    {% endif %}
                    {{ product.metafields.c_f.colorway }}</a>
             </span>
        </div>



        <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>

    </div>


</div>

{% comment %}
By all means, you don't need to use a clearing div. Use whatever it is you use to clear
floated elements. The code that follows just just shows you how to use a cycle element.
Notice that we named it ( 'clear' ). We need to name it because there's another cycle
element in this file ( we called that other one 'last' ). If you have more than one
cycle element in a rendered view, you'll need to name all of them.
The cycle element is documented here: http://docs.shopify.com/themes/liquid-basics/logic#cycle
{% endcomment %}

{% if product-grid-item == 'four-per-row' %}
{% cycle 'clear': '', '', '', '<div style="clear:both"></div>' %}
{% endif %}
